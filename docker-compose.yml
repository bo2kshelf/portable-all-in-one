version: "3.7"

services:
  imageproxy:
    restart: always
    image: willnorris/imageproxy@sha256:7e4c77d1b64db9152591dbfd8565d5d377eb8a243040efa4e241b97ba94feb1d
    networks:
      - imageproxy
    ports:
      - published: ${IMAGEPROXY_PORT}
        target: 8080
    depends_on:
      imageproxy-redis:
        condition: service_healthy
    environment:
      IMAGEPROXY_CACHE: redis://imageproxy-redis:6379

  imageproxy-redis:
    restart: always
    image: redis:6@sha256:2d17fb90c268b1c7799234216c875490a35fe8fa13fbc5495b7247d93e77255e
    healthcheck: &redis-healthcheck
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - imageproxy
    volumes:
      - imageproxy-redis-data:/data

  api-gateway:
    restart: always
    image: ghcr.io/bo2kshelf/api-gateway:develop@sha256:bb5c602f8c0e2689fe807f50ec072c256d6b1942d5b5b2f9d23a073719c8a9b1
    networks:
      - api
    ports:
      - published: ${API_GATEWAY_PORT}
        target: 4000
    depends_on:
      bookcover-api:
        condition: service_started
      neo4j-api:
        condition: service_started
      users-api:
        condition: service_started
      search-api:
        condition: service_started
    environment:
      PORT: 4000
      BOOKS_API_URL: http://neo4j-api:4000/graphql
      BOOKCOVER_API_URL: http://bookcover-api:4000/graphql
      SEARCH_API_URL: http://search-api:4000/graphql
      USERS_API_URL: http://users-api:4000/graphql
      JWT_SECRET: $API_GATEWAY_JWT_SECRET
      USER_API_ENDPOINT: http://users-api:4000

  bookcover-api:
    restart: always
    image: ghcr.io/bo2kshelf/bookcover-api:develop@sha256:8e4bfab9924f631a92490fd2c3d9722ee255bc217771311674a081de73d69550
    networks:
      - api
      - bookcover-api
      - imageproxy
    ports:
      - published: ${BOOKCOVER_API_PORT}
        target: 4000
    depends_on:
      bookcover-api-redis:
        condition: service_healthy
    environment:
      PORT: 4000
      RAKUTEN_APPLICATION_ID: $RAKUTEN_APPLICATION_ID
      RAKUTEN_APPLICATION_SECRET: $RAKUTEN_APPLICATION_SECRET
      IMAGEPROXY_BASE_URL: $IMAGEPROXY_BASE_URL
      REDIS_HOST: bookcover-api-redis
      REDIS_PORT: 6379

  bookcover-api-redis:
    restart: always
    image: redis:6@sha256:2d17fb90c268b1c7799234216c875490a35fe8fa13fbc5495b7247d93e77255e
    healthcheck: *redis-healthcheck
    networks:
      - bookcover-api
    volumes:
      - bookcover-api-redis-data:/data

  neo4j-api:
    restart: always
    image: ghcr.io/bo2kshelf/neo4j-api:develop@sha256:50ca4335d6df20e21369cf04ff589becd594f8b8ded0b2270547ef762bc5aad2
    depends_on:
      neo4j-api-neo4j:
        condition: service_healthy
    networks:
      - api
      - neo4j-api
    ports:
      - published: ${NEO4J_API_PORT}
        target: 4000
    environment:
      PORT: 4000
      NEO4J_URL: bolt://neo4j-api-neo4j:7687
      NEO4J_USERNAME: ${NEO4J_API_NEO4J_USERNAME}
      NEO4J_PASSWORD: ${NEO4J_API_NEO4J_PASSWORD}

  neo4j-api-neo4j:
    restart: always
    image: neo4j:4.2@sha256:732105228bb4baefe77361def4cd4709c31061abc98387bf9d09730447cd8ece
    networks:
      - neo4j-api
    ports:
      - published: $NEO4J_API_NEO4J_HTTP_PORT
        target: 7474
      - published: $NEO4J_API_NEO4J_BOLT_PORT
        target: 7687
    healthcheck: &neo4j-healthcheck
      test: wget http://localhost:7474/browser -O-
      interval: 5s
      timeout: 3s
      retries: 30
    environment:
      NEO4J_AUTH: ${NEO4J_API_NEO4J_USERNAME}/${NEO4J_API_NEO4J_PASSWORD}
      NEO4JLABS_PLUGINS: '["apoc"]'
      NEO4J_apoc_export_file_enabled: "true"
      NEO4J_apoc_import_file_enabled: "true"
      NEO4J_apoc_import_file_use__neo4j__config: "true"
    volumes:
      - neo4j-api-neo4j-data:/data
      - neo4j-api-neo4j-logs:/logs
      - neo4j-api-neo4j-import:/var/lib/neo4j/import
      - neo4j-api-neo4j-plugins:/plugins

  users-api:
    restart: always
    image: ghcr.io/bo2kshelf/users-api:develop@sha256:d38de0cf4ddfea63a9529212cb4e273fecd6cf8fcef75689f950007e4430460c
    depends_on:
      users-api-mysql:
        condition: service_healthy
    networks:
      - api
      - users-api
      - imageproxy
    ports:
      - published: ${USERS_API_PORT}
        target: 4000
    environment:
      PORT: 4000
      IMAGEPROXY_BASE_URL: $IMAGEPROXY_BASE_URL
      JWT_SECRET: $USERS_API_JWT_SECRET
      PRISMA_DATABASE_URL: mysql://root:${USERS_API_MYSQL_ROOT_PASSWORD}@users-api-mysql:3306/${USERS_API_MYSQL_DATABASE}

  users-api-mysql:
    restart: always
    image: mysql:8.0@sha256:00b627abbd6e91d5d0e4be786869930497b9759bf40db3f15408bb894daf5263
    networks:
      - users-api
    ports:
      - published: $USERS_API_MYSQL_PORT
        target: 3306
    environment:
      MYSQL_ROOT_PASSWORD: $USERS_API_MYSQL_ROOT_PASSWORD
      MYSQL_DATABASE: $USERS_API_MYSQL_DATABASE
    volumes:
      - users-api-mysql-data:/var/lib/mysql
    healthcheck: &mysql-healthcheck
      test: "mysqladmin ping -h localhost"
      interval: 10s
      timeout: 20s
      retries: 10

  search-api:
    restart: always
    image: ghcr.io/bo2kshelf/search-api:develop@sha256:340697cf79efb99c971bb438ae1bfcc79f6e3f120c780a7e4fcb016095a401b5
    depends_on:
      search-api-elasticsearch:
        condition: service_healthy
    networks:
      - api
      - search-api
    ports:
      - published: ${SEARCH_API_PORT}
        target: 4000
    environment:
      ELASTICSEARCH_NODE_URI: http://search-api-elasticsearch:9200
      ELASTICSEARCH_BOOKS_INDEX: books
      ELASTICSEARCH_AUTHORS_INDEX: authors
      ELASTICSEARCH_SERIES_INDEX: series

  search-api-elasticsearch:
    restart: always
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2@sha256:2c257b68f361872e13bdd476cba152e232a314ec61b0eedfc1f71b628ba39432
    networks:
      - search-api
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - search-api-elasticsearch:/usr/share/elasticsearch/data
    healthcheck: &elasicsearch-healthcheck
      test: "curl --fail http://localhost:9200 || exit 1"
      interval: 2s
      timeout: 60s
      retries: 300

  auth-server:
    restart: always
    image: ghcr.io/bo2kshelf/auth-server:develop@sha256:93801e6594ee27713677aae90677910510e5f6ed60f169e659897bfe1204a969
    depends_on:
      auth-server-mongo:
        condition: service_healthy
      auth-server-postgresql:
        condition: service_healthy
    environment:
      PORT: 4000
      USER_API_ENDPOINT: http://users-api:4000
      JWT_SECRET: ${AUTH_SERVER_JWT_SECRET}
      SESSION_SECRET: ${AUTH_SERVER_SESSION_SECRET}
      SESSION_MONGO_URI: mongodb://${AUTH_SERVER_MONGO_USERNAME}:${AUTH_SERVER_MONGO_PASSWORD}@auth-server-mongo:27017/${AUTH_SERVER_MONGO_DATABASE}?authSource=admin
      PRISMA_DATABASE_URL: postgresql://${AUTH_SERVER_POSTGRES_USERNAME}:${AUTH_SERVER_POSTGRES_PASSWORD}@auth-server-postgresql:5432/${AUTH_SERVER_POSTGRES_DATABASE}
    ports:
      - published: ${AUTH_SERVER_PORT}
        target: 4000
    networks:
      - auth-server
      - users-api

  auth-server-mongo:
    restart: always
    image: mongo:4.4@sha256:75a5f624bd6d14254e0d84c2833f576109672750aaf2bf01d61cb5ead44f4505
    healthcheck: &mongo-healthcheck
      test: test $$(echo "db.runCommand('ping').ok" | mongo --quiet) -eq 1
      interval: 2s
      start_period: 30s
    ports:
      - published: $AUTH_SERVER_MONGO_PORT
        target: 27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${AUTH_SERVER_MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${AUTH_SERVER_MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${AUTH_SERVER_MONGO_DATABASE}
    networks:
      - auth-server
    volumes:
      - auth-server-mongo-data:/data/db

  auth-server-postgresql:
    restart: always
    image: postgres:13.2@sha256:7d3e318f67bac6b24f5c7d988cac61926fb86798135f2ac59c5483151e837ef2
    healthcheck: &postgresql-healthcheck
      test: ["CMD", "pg_isready"]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - auth-server
    ports:
      - published: $AUTH_SERVER_POSTGRES_PORT
        target: 5432
    environment:
      POSTGRES_USER: ${AUTH_SERVER_POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${AUTH_SERVER_POSTGRES_PASSWORD}
      POSTGRES_DB: ${AUTH_SERVER_POSTGRES_DATABASE}
    volumes:
      - auth-server-postgresql-data:/var/lib/postgresql/data

  # for development tools
  adminer:
    restart: always
    image: adminer:standalone@sha256:1bf211fe728494901bba5461024fa8011182a97f8d5fbd121a19e58043e41e9e
    networks:
      - auth-server
      - users-api
    ports:
      - published: $ADMINER_PORT
        target: 8080
    environment:
      ADMINER_DESIGN: $ADMINER_DESIGN

volumes:
  imageproxy-redis-data:
  users-api-mysql-data:
  bookcover-api-redis-data:
  neo4j-api-neo4j-data:
  neo4j-api-neo4j-logs:
  neo4j-api-neo4j-import:
  neo4j-api-neo4j-plugins:
  search-api-elasticsearch:
  auth-server-mongo-data:
  auth-server-postgresql-data:

networks:
  imageproxy:
    driver: bridge

  auth-server:
    driver: bridge

  api:
    driver: bridge

  users-api:
    driver: bridge

  neo4j-api:
    driver: bridge

  bookcover-api:
    driver: bridge

  search-api:
    driver: bridge
